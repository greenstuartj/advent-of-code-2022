
data: read_table 'data.txt';

collect c g: if c = get 0 get 0 g then (amend_with c &>) 0 g else [c] &> g;
groups: (reduce collect) @ (amend_with (&>[])@[]<&) @ (-1) @ reflex length;

x: 0;
y: 1;
z: 2;

max_x: 1 + (reduce (>.)) get x data;
max_y: 1 + (reduce (>.)) get y data;
max_z: 1 + (reduce (>.)) get z data;

axis_max: [max_x, max_y, max_z];

count_faces lock_axis_a toa lock_axis_b tob check_axis:
  let span: (seq id) (get check_axis) axis_max 0 in
  2 *
  length
  (filter (!=0) @ get 0)
  groups
  (reduce \i s: amend i 1 s)
  (<&span)
  get check_axis
  (map replicate
         (zip_with (and))
           (map tob =) get lock_axis_b data
           (map toa =) get lock_axis_a data)
       data;

count_side axis_a axis_b check_axis:
  sum
  (map apply count_faces)
  (map \p: [axis_a, get 0 p, axis_b, get 1 p, check_axis])
  unique transpose [get axis_a data, get axis_b data];

result1: (count_side x z y) + (count_side x y z) + (count_side y z x);