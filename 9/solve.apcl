
data: (amend_with (map map (+1)) @ map iota) 1 read_dsv 'data.txt' ' ' ':';

moves: 'RLUD';
functions: [ R, L, U, D ];

get_move move: get (get 0 index move moves) functions;

R move initial: (map ((get 0 initial)&>>)) (map (+(get 1 initial))) move;
L move initial: reverse (map ((get 0 initial)&>>)) (map ((get 1 initial)-)) reverse move;
U move initial: (map (<<&(get 1 initial))) (map (+(get 0 initial))) move;
D move initial: reverse (map (<<&(get 1 initial))) (map ((get 0 initial)-)) reverse move;

signum n: if n=0 then 0 else if n>0 then 1 else ~1;

deltas: concat (reflex catalogue_with \x y: [x, y]) [1,0,~1];

dont_move tail head:
  member true (\t h: (map (=h)) (map (zip_with (+)) t) deltas) tail head;

move tail head:
  if dont_move tail head then
    tail
  else
    (zip_with (+)) (zip_with \b n: if b then ~ signum n else 0) (reflex map (>1) @ |) (reflex (zip_with ~ @ (-)) tail) head;

head_moves start:
  let moves: (map \p: get_move (get 0 p) (get 1 p)) transpose data in
  let step: \e a: a & e get ~1 a in
  (reduce (\i a: step get i moves a)) (reverse iota length moves) <& [start];

tail_moves hm: (reduce \i a: a & [move get ~1 a get i hm]) (reverse iota length hm) <& [get 0 hm];

result1: length unique tail_moves head_moves [0,0];

result2: length unique (repeat tail_moves) 9 head_moves [0,0];